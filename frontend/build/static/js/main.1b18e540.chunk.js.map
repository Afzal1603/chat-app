{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","color","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","borderColor","Text","fontSize","fontFamily","fontWeight","Tabs","isFitted","TabList","mb","Tab","_focus","borderBottomColor","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.1b18e540.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container color={\"#a1a1aa\"} maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg={\"#3f3f46\"}\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n        borderColor={\"#3f3f46\"}\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\" fontWeight={\"extrabold\"}>\n          Chat App\n        </Text>\n      </Box>\n      <Box\n        bg={\"#3f3f46\"}\n        color={\"#a1a1aa\"}\n        w=\"100%\"\n        p={4}\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n        borderColor={\"#3f3f46\"}\n      >\n        <Tabs isFitted variant=\"enclosed\" width={\"100%\"}>\n          <TabList mb=\"1em\" width={\"100%\"}>\n            <Tab\n              fontWeight={\"bold\"}\n              width=\"50%\"\n              _focus={{ borderBottomColor: \"#3f3f46\" }}\n            >\n              Log in\n            </Tab>\n            <Tab\n              fontWeight={\"bold\"}\n              width=\"50%\"\n              _focus={{ borderBottomColor: \"#3f3f46\" }}\n            >\n              Sign Up\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#525252\" : \"#0a0a0a\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction }) => {\n  const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#3f3f46\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box\n          color=\"black\"\n          d=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n        >\n          <Text color=\"white\" fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg={\"#27272a\"}\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      color=\"white\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg={\"#27272a\"}\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"white\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n            color=\"black\"\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg={\"#3f3f46\"}\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"#27272A\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"2px\"\n        color=\"white\"\n        borderRadius=\"lg\"\n        borderColor=\"black\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            borderColor=\"white\"\n            borderWidth=\"1px\"\n          >\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Chat App\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList bg=\"#27272A\" color=\"#71717a\">\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader color=\"white\" bg=\"#3f3f46\" borderBottomWidth=\"1px\">\n            Search Users\n          </DrawerHeader>\n          <DrawerBody bg=\"#3f3f46\">\n            <Box d=\"flex\" pb={2}>\n              <Input\n                color=\"white\"\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box\n        color=\"black\"\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        w=\"100%\"\n        h=\"91.5vh\"\n        p=\"10px\"\n      >\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}